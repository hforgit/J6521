C51 COMPILER V9.01   XY_HAL_TIMER                                                          03/27/2021 10:55:08 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE XY_HAL_TIMER
OBJECT MODULE PLACED IN .\Objects\xy_hal_timer.obj
COMPILER INVOKED BY: D:\MDK5\C51\BIN\C51.EXE 03_HAL\xy_hal_timer.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\01_APL;.
                    -\02_FML;.\03_HAL;.\04_SYS) DEBUG PRINT(.\Listings\xy_hal_timer.lst) OBJECT(.\Objects\xy_hal_timer.obj)

line level    source

   1          #include "xy_sys_headfile.h"
   2          
   3          /*********************************************************************************************************
             -**************
   4          * Function Name: 
   5          * Description  : 
   6          * Arguments    : None
   7          * Return Value : None
   8          **********************************************************************************************************
             -*************/
   9          void hal_timer_Init(void)
  10          {
  11   1              TMCON |= 0X05;
  12   1      
  13   1              /*      TIMER0  */
  14   1              TMOD |= 0x01;     
  15   1              TH0 = 0xF8;     //F8
  16   1              TL0 = 0x90;     //30
  17   1              TR0 = 0;
  18   1              ET0 = 1;
  19   1              TR0 = 1;
  20   1      
  21   1              /*      TIMER2  */
  22   1              RCAP2H=0xfc;     //溢出时间：时钟为Fsys，则12000*（1/Fsys）=0.5ms;
  23   1              RCAP2L=0xbe;     // 7E   7D - 81
  24   1              TR2 = 0;
  25   1              ET2 = 1;//定时器2允许
  26   1              TR2 = 1;
  27   1              IPT2 = 1;
  28   1      
  29   1              /*      WDT */
  30   1              OPINX |= 0XC1;
  31   1              OPREG |= 0X82;
  32   1              WDTCON |= 0X10;
  33   1      }
  34          /*********************************************************************************************************
             -**************
  35          * Function Name: 
  36          * Description  : 
  37          * Arguments    : None
  38          * Return Value : None
  39          **********************************************************************************************************
             -*************/
  40          void hal_timer_buzzer(buzzercontrol* p_bee)
  41          {       
  42   1              if(ON == p_bee->bee_state)
  43   1              {
  44   2                      p_bee->bee_count++;
  45   2                      if(p_bee->bee_count<=1)                         
  46   2                      {
  47   3                              bee_on();
  48   3                      }
  49   2                      else
  50   2                      {
C51 COMPILER V9.01   XY_HAL_TIMER                                                          03/27/2021 10:55:08 PAGE 2   

  51   3                              p_bee->bee_count=0;
  52   3                              bee_off();
  53   3                      }
  54   2              }
  55   1              else
  56   1              {
  57   2                      p_bee->bee_count=0;
  58   2                      bee_off();
  59   2              }
  60   1      
  61   1      }
  62          /*********************************************************************************************************
             -**************
  63          * Function Name:
  64          * Description  : 1ms
  65          * Arguments    : None
  66          * Return Value : None
  67          **********************************************************************************************************
             -*************/
  68          void hal_timer_motor_blow(motorcontrol* p_motor)
  69          {
  70   1              p_motor->blow_motor_step_delay_count++;
  71   1      
  72   1              if(p_motor->blow_motor_step_delay_count>=4)
  73   1              {
  74   2                      p_motor->blow_motor_step_delay_count=4;
  75   2                      p_motor->blow_motor_step_delay_flag=1;
  76   2              }
  77   1      }
  78          
  79          /*********************************************************************************************************
             -**************
  80          * Function Name:
  81          * Description  : 1ms
  82          * Arguments    : None
  83          * Return Value : None
  84          **********************************************************************************************************
             -*************/
  85          void hal_timer_motor_absorb(motorcontrol* p_motor)
  86          {
  87   1              p_motor->absorb_motor_step_delay_count++;
  88   1      
  89   1              if(p_motor->absorb_motor_step_delay_count>=4)
  90   1              {
  91   2                      p_motor->absorb_motor_step_delay_count=4;
  92   2                      p_motor->absorb_motor_step_delay_flag=1;
  93   2              }
  94   1      }
  95          
  96          /*********************************************************************************************************
             -**************
  97          * Function Name: 
  98          * Description  : 
  99          * Arguments    : None
 100          * Return Value : None
 101          **********************************************************************************************************
             -*************/
 102          void hal_timer_mode_deal(workmoduleflag* p_mode)
 103          {
 104   1              if(SET == p_mode->flag_workdelay_10s)                           
 105   1              {
 106   2                      p_mode->workdelay_10s++;
C51 COMPILER V9.01   XY_HAL_TIMER                                                          03/27/2021 10:55:08 PAGE 3   

 107   2                      if(p_mode->workdelay_10s >= CLOCK_DELAYTIMER_10S)
 108   2                      {
 109   3                              p_mode->workdelay_10s = CLOCK_DELAYTIMER_10S;
 110   3                      }
 111   2              }
 112   1              else
 113   1              {
 114   2                      p_mode->workdelay_10s = CLOCK_DELAYTIMER_0S;
 115   2              }
 116   1              if(SET == p_mode->flag_workdelay_1s)
 117   1              {
 118   2                      p_mode->workdelay_1s++;
 119   2                      if(p_mode->workdelay_1s >= CLOCK_DELAYTIMER_1S)
 120   2                      {
 121   3                              p_mode->workdelay_1s = CLOCK_DELAYTIMER_1S;
 122   3                      }
 123   2              }
 124   1              else
 125   1              {
 126   2                      p_mode->workdelay_1s = CLOCK_DELAYTIMER_0S;
 127   2              }
 128   1      
 129   1              p_mode->workdelay_cyc++;
 130   1              if(p_mode->workdelay_cyc >= CLOCK_DELAYTIMER_CYC)
 131   1              {
 132   2                      p_mode->workdelay_cyc = CLOCK_DELAYTIMER_0S;
 133   2              }
 134   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    254    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
