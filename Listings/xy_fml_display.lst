C51 COMPILER V9.01   XY_FML_DISPLAY                                                        03/20/2021 14:12:11 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE XY_FML_DISPLAY
OBJECT MODULE PLACED IN .\Objects\xy_fml_display.obj
COMPILER INVOKED BY: D:\MDK5\C51\BIN\C51.EXE 02_FML\xy_fml_display.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\01_APL
                    -;.\02_FML;.\03_HAL;.\04_SYS) DEBUG PRINT(.\Listings\xy_fml_display.lst) OBJECT(.\Objects\xy_fml_display.obj)

line level    source

   1          #include "xy_sys_headfile.h"
   2          
   3          /*********************************************************************************************************
             -**************
   4          * Function Name: 
   5          * Description  : 
   6          * Arguments    : None
   7          * Return Value : None
   8          **********************************************************************************************************
             -*************/
   9          void fml_display_conf_blow(datall* p_data)
  10          {
  11   1              if(SYM_BLOW_ON == p_data->display.disp_icon_blow)
  12   1              {
  13   2                      DISPLAY_SYMBOL_BLOW_ON;
  14   2              }
  15   1              else
  16   1              {
  17   2                      DISPLAY_SYMBOL_BLOW_OFF;
  18   2              }
  19   1      }
  20          
  21          /*********************************************************************************************************
             -**************
  22          * Function Name: 
  23          * Description  : 
  24          * Arguments    : None
  25          * Return Value : None
  26          **********************************************************************************************************
             -*************/
  27          void fml_display_conf_warm(datall* p_data)
  28          {
  29   1              static unsigned char s_count_2s = 0;
  30   1              
  31   1              if(SYM_WARM_ON == p_data->display.disp_icon_warm)
  32   1              {
  33   2                      s_count_2s = 0;
  34   2                      DISPLAY_SYMBOL_WARM_ON;
  35   2              }
  36   1              else if((SYM_WARM_TWINKLE_STANDBY == p_data->display.disp_icon_warm)
  37   1                      || (SYM_WARM_TWINKLE_ABSORB == p_data->display.disp_icon_warm))
  38   1              {
  39   2                      s_count_2s++;
  40   2                      if(s_count_2s >= 4)
  41   2                              s_count_2s = 0;
  42   2      
  43   2                      if(s_count_2s < 2)
  44   2                      {
  45   3                              DISPLAY_SYMBOL_WARM_ON;
  46   3                      }
  47   2                      else
  48   2                      {
  49   3                              DISPLAY_SYMBOL_WARM_OFF;
  50   3                      }
C51 COMPILER V9.01   XY_FML_DISPLAY                                                        03/20/2021 14:12:11 PAGE 2   

  51   2              }
  52   1              else
  53   1              {
  54   2                      s_count_2s = 0;
  55   2                      DISPLAY_SYMBOL_WARM_OFF;
  56   2              }
  57   1      }
  58          
  59          /*********************************************************************************************************
             -**************
  60          * Function Name: 
  61          * Description  : 
  62          * Arguments    : None
  63          * Return Value : None
  64          **********************************************************************************************************
             -*************/
  65          void fml_display_conf_absorb(datall* p_data)
  66          {
  67   1              if(SYM_ABSORB_ON == p_data->display.disp_icon_absorb)
  68   1              {
  69   2                      DISPLAY_SYMBOL_ABSORB_ON;
  70   2              }
  71   1              else
  72   1              {
  73   2                      DISPLAY_SYMBOL_ABSORB_OFF;
  74   2              }
  75   1      }
  76          
  77          /*********************************************************************************************************
             -**************
  78          * Function Name: 
  79          * Description  : 
  80          * Arguments    : None
  81          * Return Value : None
  82          **********************************************************************************************************
             -*************/
  83          void fml_display_conf_symbol(datall* p_data)
  84          {
  85   1              #ifdef XY_SYS_TEST_MODE
  86   1                      if(YES == p_data->testmode)
  87   1                              return;
  88   1              #endif
  89   1              
  90   1              fml_display_conf_warm(p_data);
  91   1              fml_display_conf_blow(p_data);
  92   1              fml_display_conf_absorb(p_data);
  93   1      }
  94          
  95          /*********************************************************************************************************
             -**************
  96          * Function Name: 
  97          * Description  : 
  98          * Arguments    : None
  99          * Return Value : None
 100          **********************************************************************************************************
             -*************/
 101          void fml_display_tx_data(datall* p_data)
 102          {
 103   1              unsigned char send_size = 0;
 104   1              unsigned char temp_disp = 0;
 105   1              static unsigned char s_table[10] = {0};
 106   1              
C51 COMPILER V9.01   XY_FML_DISPLAY                                                        03/20/2021 14:12:11 PAGE 3   

 107   1              #ifdef XY_SYS_DEBUG_MODE
 108   1                      unsigned char temp;
 109   1                      static unsigned char s_count = 0;
 110   1              #endif
 111   1      
 112   1              #ifdef XY_SYS_TEST_MODE
 113   1                      if(YES == p_data->testmode)
 114   1                              return;
 115   1              #endif
 116   1      
 117   1              s_table[0]=((DISPLAY_DATA_HEAD_PRI>>8) & 0xFF);
 118   1      
 119   1              #ifdef XY_SYS_DEBUG_MODE
 120   1                      if(p_data->error.dat)
 121   1                      {
 122   2                              s_table[1]=0x02;
 123   2                              s_table[2]=p_data->display.disp_icon_data;
 124   2                              if(s_count < 2)
 125   2                              {
 126   3                                      temp = DISPLAY_GET_ERR_NUMB(p_data->error.dat);
 127   3                                      s_table[3]=DISPLAY_TABLE_SEG(temp);
 128   3                              }
 129   2                              else
 130   2                              {
 131   3                                      s_table[3]=0;
 132   3                              }
 133   2                              s_count++;
 134   2                              if(s_count >= 4)
 135   2                                      s_count = 0;
 136   2                      }
 137   1                      else
 138   1              #endif
 139   1                      {
 140   2                              s_table[1]=(DISPLAY_DATA_HEAD_PRI & 0xFF);
 141   2                              s_table[2]=p_data->display.disp_icon_data;
 142   2                              s_table[3]=0x00;
 143   2                      }
 144   1              s_table[4]=s_table[0]+s_table[1]+s_table[2]+s_table[3];
 145   1              s_table[5]=0x16;
 146   1              send_size = 6;
 147   1              
 148   1              p_data->uart.send_uart1_len = send_size;
 149   1              memcpy(p_data->uart.send_uart1_dat,s_table,send_size);
 150   1              p_data->uart.send_data = 1;
 151   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    828    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     12       7
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
