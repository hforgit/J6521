C51 COMPILER V9.01   XY_FML_DISPLAY                                                        03/15/2021 13:22:02 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE XY_FML_DISPLAY
OBJECT MODULE PLACED IN .\Objects\xy_fml_display.obj
COMPILER INVOKED BY: D:\MDK5\C51\BIN\C51.EXE 02_FML\xy_fml_display.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\01_APL
                    -;.\02_FML;.\03_HAL;.\04_SYS) DEBUG PRINT(.\Listings\xy_fml_display.lst) OBJECT(.\Objects\xy_fml_display.obj)

line level    source

   1          #include "xy_sys_headfile.h"
   2          
   3          /*********************************************************************************************************
             -**************
   4          * Function Name: 
   5          * Description  : 
   6          * Arguments    : None
   7          * Return Value : None
   8          **********************************************************************************************************
             -*************/
   9          void fml_display_conf_blow(datall* p_data)
  10          {
  11   1              if(SYM_BLOW_ON == p_data->display.disp_icon_blow)
  12   1              {
  13   2                      DISPLAY_SYMBOL_BLOW_ON;
  14   2              }
  15   1              else
  16   1              {
  17   2                      DISPLAY_SYMBOL_BLOW_OFF;
  18   2              }
  19   1      }
  20          
  21          /*********************************************************************************************************
             -**************
  22          * Function Name: 
  23          * Description  : 
  24          * Arguments    : None
  25          * Return Value : None
  26          **********************************************************************************************************
             -*************/
  27          void fml_display_conf_warm(datall* p_data)
  28          {
  29   1              static unsigned char s_count_2s = 0;
  30   1              
  31   1              if(SYM_WARM_ON == p_data->display.disp_icon_warm)
  32   1              {
  33   2                      s_count_2s = 0;
  34   2                      DISPLAY_SYMBOL_WARM_ON;
  35   2              }
  36   1              else if((SYM_WARM_TWINKLE_STANDBY == p_data->display.disp_icon_warm)
  37   1                      || (SYM_WARM_TWINKLE_ABSORB == p_data->display.disp_icon_warm))
  38   1              {
  39   2                      s_count_2s++;
  40   2                      if(s_count_2s >= 4)
  41   2                              s_count_2s = 0;
  42   2      
  43   2                      if(s_count_2s < 2)
  44   2                      {
  45   3                              DISPLAY_SYMBOL_WARM_ON;
  46   3                      }
  47   2                      else
  48   2                      {
  49   3                              DISPLAY_SYMBOL_WARM_OFF;
  50   3                      }
C51 COMPILER V9.01   XY_FML_DISPLAY                                                        03/15/2021 13:22:02 PAGE 2   

  51   2              }
  52   1              else
  53   1              {
  54   2                      s_count_2s = 0;
  55   2                      DISPLAY_SYMBOL_WARM_OFF;
  56   2              }
  57   1      }
  58          
  59          /*********************************************************************************************************
             -**************
  60          * Function Name: 
  61          * Description  : 
  62          * Arguments    : None
  63          * Return Value : None
  64          **********************************************************************************************************
             -*************/
  65          void fml_display_conf_absorb(datall* p_data)
  66          {
  67   1              if(SYM_ABSORB_ON == p_data->display.disp_icon_absorb)
  68   1              {
  69   2                      DISPLAY_SYMBOL_ABSORB_ON;
  70   2              }
  71   1              else
  72   1              {
  73   2                      DISPLAY_SYMBOL_ABSORB_OFF;
  74   2              }
  75   1      }
  76          
  77          /*********************************************************************************************************
             -**************
  78          * Function Name: 
  79          * Description  : 
  80          * Arguments    : None
  81          * Return Value : None
  82          **********************************************************************************************************
             -*************/
  83          void fml_display_conf_symbol(datall* p_data)
  84          {
  85   1              #ifdef XY_SYS_TEST_MODE
  86   1                      if(YES == p_data->testmode)
  87   1                              return;
  88   1              #endif
  89   1              
  90   1              fml_display_conf_warm(p_data);
  91   1              fml_display_conf_blow(p_data);
  92   1              fml_display_conf_absorb(p_data);
  93   1      }
  94          
  95          /*********************************************************************************************************
             -**************
  96          * Function Name: 
  97          * Description  : 
  98          * Arguments    : None
  99          * Return Value : None
 100          **********************************************************************************************************
             -*************/
 101          void fml_display_tx_data(datall* p_data)
 102          {
 103   1              unsigned char send_size = 0;
 104   1              unsigned char temp_disp = 0;
 105   1              static unsigned char s_send_mode = 0;
 106   1              static unsigned char s_table[10] = {0};
C51 COMPILER V9.01   XY_FML_DISPLAY                                                        03/15/2021 13:22:02 PAGE 3   

 107   1              static unsigned char s_sequence  = 0;
 108   1              
 109   1              #ifdef XY_SYS_DEBUG_MODE
 110   1                      unsigned char temp;
 111   1                      static unsigned char s_count = 0;
 112   1              #endif
 113   1      
 114   1              #ifdef XY_SYS_TEST_MODE
 115   1                      if(YES == p_data->testmode)
 116   1                              return;
 117   1              #endif
 118   1      
 119   1              switch(p_data->uart.rec_protocol)
 120   1              {
 121   2                      case RESET:
 122   2                              s_send_mode ^= 0;                               //s_send_mode ^= 1;
 123   2                              temp_disp = 100;
 124   2                              break;
 125   2                      case OLD:
 126   2                              s_send_mode = 0;
 127   2                              break;
 128   2                      case NEW:
 129   2                              s_send_mode = 0;                                //s_send_mode = 1;
 130   2                              temp_disp = p_data->temperature.value;
 131   2                              break;
 132   2                      default:
 133   2                              break;
 134   2              }
 135   1              if(0 == s_send_mode)
 136   1              {
 137   2                      s_table[0]=((DISPLAY_DATA_HEAD_PRI>>8) & 0xFF);
 138   2              
 139   2                      #ifdef XY_SYS_DEBUG_MODE
 140   2                              if(p_data->error.dat)
 141   2                              {
 142   3                                      s_table[1]=0x02;
 143   3                                      s_table[2]=p_data->display.disp_icon_data;
 144   3                                      if(s_count < 2)
 145   3                                      {
 146   4                                              temp = DISPLAY_GET_ERR_NUMB(p_data->error.dat);
 147   4                                              s_table[3]=DISPLAY_TABLE_SEG(temp);
 148   4                                      }
 149   3                                      else
 150   3                                      {
 151   4                                              s_table[3]=0;
 152   4                                      }
 153   3                                      s_count++;
 154   3                                      if(s_count >= 4)
 155   3                                              s_count = 0;
 156   3                              }
 157   2                              else
 158   2                      #endif
 159   2                              {
 160   3                                      s_table[1]=(DISPLAY_DATA_HEAD_PRI & 0xFF);
 161   3                                      s_table[2]=p_data->display.disp_icon_data;
 162   3                                      s_table[3]=0x00;
 163   3                              }
 164   2      
 165   2                      s_table[4]=s_table[0]+s_table[1]+s_table[2]+s_table[3];
 166   2                      s_table[5]=0x16;
 167   2      
 168   2                      send_size = 6;
C51 COMPILER V9.01   XY_FML_DISPLAY                                                        03/15/2021 13:22:02 PAGE 4   

 169   2              }
 170   1              else
 171   1              {
 172   2                      s_table[0] = DISPLAY_DATA_HEAD_XY >> 8 & 0xFF;
 173   2                      s_table[1] = DISPLAY_DATA_HEAD_XY & 0xFF;
 174   2                      s_table[2] = DISPLAY_DATA_LENGTH;
 175   2                      s_table[3] = DISPLAY_DATA_VERSION;
 176   2                      s_table[4] = s_sequence;
 177   2                      s_table[5] = DISPLAY_DATA_COMMAND;
 178   2                      if(temp_disp > 99)
 179   2                      {
 180   3                              s_table[6] = 0x40;
 181   3                              s_table[7] = 0x40;
 182   3                              s_table[8] = 0x00;
 183   3                      }
 184   2                      else
 185   2                      {
 186   3                              s_table[6] = DISPLAY_TABLE_SEG(temp_disp/10) | (DISPLAY_GET_SYMBOL_BLOW   ? 0x80 : 0);
 187   3                              s_table[7] = DISPLAY_TABLE_SEG(temp_disp%10) | (DISPLAY_GET_SYMBOL_ABSORB ? 0x80 : 0);
 188   3                              s_table[8] = (DISPLAY_GET_SYMBOL_WARM ? 0x80 : 0);
 189   3                      }
 190   2      
 191   2                      s_table[9] = hal_alg_chk_crc8(s_table, 9);
 192   2      
 193   2                      s_sequence++;
 194   2                      send_size = 10;
 195   2              }
 196   1              p_data->uart.send_uart1_len = send_size;
 197   1              memcpy(p_data->uart.send_uart1_dat,s_table,send_size);
 198   1              p_data->uart.send_data = 1;
 199   1      //      hal_serial_uart_tx_display(s_table, send_size);
 200   1      }
 201          
 202          /*********************************************************************************************************
             -**************
 203          * Function Name: 
 204          * Description  : 
 205          * Arguments    : None
 206          * Return Value : None
 207          **********************************************************************************************************
             -*************/
 208          void fml_display_ack_remote(displaycontrol* p_disp)
 209          {
 210   1              static unsigned char s_table[7] = {0};
 211   1      //      static uartdata* p_data = &g_datall.uart;
 212   1      
 213   1              s_table[0] = DISPLAY_DATA_HEAD_XY >> 8 & 0xFF;
 214   1              s_table[1] = DISPLAY_DATA_HEAD_XY & 0xFF;
 215   1              s_table[2] = 4;
 216   1              s_table[3] = DISPLAY_DATA_VERSION;
 217   1              s_table[4] = p_disp->sequence;
 218   1              s_table[5] = p_disp->command;
 219   1              s_table[6] = hal_alg_chk_crc8(s_table, 6);
 220   1              
 221   1      //      p_data->uart.send_uart1_len = 7;
 222   1      //      memcpy(p_data->uart.send_uart1_dat,s_table,7);
 223   1      //      p_data->uart.send_data = 1;
 224   1      //      hal_serial_uart_tx_display(s_table, 7);
 225   1      }
 226          
 227          /*********************************************************************************************************
             -**************
C51 COMPILER V9.01   XY_FML_DISPLAY                                                        03/15/2021 13:22:02 PAGE 5   

 228          * Function Name: 
 229          * Description  : 
 230          * Arguments    : None
 231          * Return Value : None
 232          **********************************************************************************************************
             -*************/
 233          keystate fml_display_deal_remote(unsigned char* p_buffer)
 234          {
 235   1              unsigned char i;
 236   1              unsigned int  temp;
 237   1              unsigned char chk_sum = 0;
 238   1              keystate          sta = KEY_RELEASE;
 239   1      
 240   1              for(i=0; i<3; i++)
 241   1              {
 242   2                      chk_sum += p_buffer[i];
 243   2              }
 244   1      
 245   1              if(chk_sum == p_buffer[i])              ///< check sum
 246   1              {
 247   2                      temp = p_buffer[0];
 248   2                      temp <<= 8;
 249   2                      temp += p_buffer[1];
 250   2                      if(temp == DISPLAY_REMOTE_KEY_HEAD)             ///< check head
 251   2                      {
 252   3                              sta = DISPLAY_GET_KEY_VALUE(p_buffer[2]);
 253   3                      }
 254   2              }
 255   1      
 256   1              return sta;
 257   1      }
 258          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1596    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     21      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
