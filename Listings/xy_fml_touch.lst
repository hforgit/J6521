C51 COMPILER V9.01   XY_FML_TOUCH                                                          03/18/2021 08:37:09 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE XY_FML_TOUCH
OBJECT MODULE PLACED IN .\Objects\xy_fml_touch.obj
COMPILER INVOKED BY: D:\MDK5\C51\BIN\C51.EXE 02_FML\xy_fml_touch.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\01_APL;.
                    -\02_FML;.\03_HAL;.\04_SYS) DEBUG PRINT(.\Listings\xy_fml_touch.lst) OBJECT(.\Objects\xy_fml_touch.obj)

line level    source

   1          #include "xy_sys_headfile.h"
   2          
   3          /*********************************************************************************************************
             -**************
   4          * Function Name: 
   5          * Description  : 
   6          * Arguments    : None
   7          * Return Value : None
   8          **********************************************************************************************************
             -*************/
   9          void fml_touch_init_data(datall* p_data)
  10          {
  11   1              p_data->touch.current.dat = 0;
  12   1      }
  13          
  14          /*********************************************************************************************************
             -**************
  15          * Function Name: 
  16          * Description  : 
  17          * Arguments    : None
  18          * Return Value : None
  19          **********************************************************************************************************
             -*************/
  20          void fml_touch_recv_data(datall* p_data)
  21          {
  22   1              unsigned char           i;
  23   1              unsigned char           temp_sum = 0;
  24   1              unsigned char           buffer[sizeof(p_data->uart.rec_uart0_dat)] = {0};
  25   1              static datacommon       s_data;
  26   1              
  27   1              if(p_data->uart.rec_uart0_ok)
  28   1              {
  29   2                      p_data->uart.rec_uart0_ok = 0;
  30   2                      memcpy(buffer, p_data->uart.rec_uart0_dat, sizeof(buffer));
  31   2                      memset(p_data->uart.rec_uart0_dat, 0, sizeof(buffer));
  32   2                      for(i=0; i<4; i++)
  33   2                      {
  34   3                              temp_sum += buffer[i];
  35   3                      }               
  36   2                      if(temp_sum == buffer[i])                       ///< check data 
  37   2                      {
  38   3                              s_data.dat = buffer[1] + (buffer[2] << 8);
  39   3                              if(s_data.dat != p_data->touch.current.dat)
  40   3                              {
  41   4                                      if(REMOTE == p_data->keytype)
  42   4                                      {
  43   5                                              memset(&p_data->remote, 0, sizeof(p_data->remote));
  44   5                                              p_data->keytype = TOUCH;
  45   5                                      }                       
  46   4                                      p_data->touch.current.dat = s_data.dat;
  47   4                              }
  48   3                      }
  49   2              }
  50   1      }
C51 COMPILER V9.01   XY_FML_TOUCH                                                          03/18/2021 08:37:09 PAGE 2   

  51          
  52          /*********************************************************************************************************
             -**************
  53          * Function Name: 
  54          * Description  : 
  55          * Arguments    : None
  56          * Return Value : None
  57          **********************************************************************************************************
             -*************/
  58          void fml_touch_deal_disp(displaycontent* p_disp)
  59          {
  60   1              if(TOUCH_SYMBOL_BLOW)
  61   1              {
  62   2                      p_disp->disp_icon_blow = SYM_BLOW_ON;
  63   2              }
  64   1              else
  65   1              {
  66   2                      p_disp->disp_icon_blow = SYM_BLOW_OFF;
  67   2              }
  68   1              if(TOUCH_SYMBOL_ABSORB)
  69   1              {
  70   2                      p_disp->disp_icon_absorb = SYM_ABSORB_ON;
  71   2              }
  72   1              else
  73   1              {
  74   2                      p_disp->disp_icon_absorb = SYM_ABSORB_OFF;
  75   2              }
  76   1              if(TOUCH_SYMBOL_WARM)
  77   1              {
  78   2                      p_disp->disp_icon_warm = SYM_WARM_ON;
  79   2              }
  80   1              else
  81   1              {
  82   2                      p_disp->disp_icon_warm = SYM_WARM_OFF;
  83   2              }
  84   1      }
  85          
  86          /*********************************************************************************************************
             -**************
  87          * Function Name: 
  88          * Description  : 
  89          * Arguments    : None
  90          * Return Value : None
  91          **********************************************************************************************************
             -*************/
  92          void fml_touch_deal_relay(normalctrol* p_ctrl)
  93          {
  94   1              if(TOUCH_RELAY_LIGHT)
  95   1              {
  96   2                      p_ctrl->keystate_light = ON;
  97   2              }
  98   1              else
  99   1              {
 100   2                      p_ctrl->keystate_light = OFF;
 101   2              }
 102   1      
 103   1              if(TOUCH_RELAY_PTC)
 104   1              {
 105   2                      p_ctrl->keystate_ptc = ON;
 106   2              }
 107   1              else
 108   1              {
C51 COMPILER V9.01   XY_FML_TOUCH                                                          03/18/2021 08:37:09 PAGE 3   

 109   2                      p_ctrl->keystate_ptc = OFF;
 110   2              }
 111   1              if(TOUCH_RELAY_FAN_BLOW)
 112   1              {
 113   2                      p_ctrl->keystate_fan_blow = ON;
 114   2              }
 115   1              else
 116   1              {
 117   2                      p_ctrl->keystate_fan_blow = OFF;
 118   2              }
 119   1              if(TOUCH_RELAY_FAN_ABSORB)
 120   1              {
 121   2                      p_ctrl->keystate_fan_absorb = ON;
 122   2              }
 123   1              else
 124   1              {
 125   2                      p_ctrl->keystate_fan_absorb = OFF;
 126   2              }
 127   1      }
 128          
 129          /*********************************************************************************************************
             -**************
 130          * Function Name: 
 131          * Description  : 
 132          * Arguments    : None
 133          * Return Value : None
 134          **********************************************************************************************************
             -*************/
 135          void fml_touch_deal_motor(motorcontrol* p_motor)
 136          {
 137   1              if(TOUCH_RELAY_MOTOR_BLOW)
 138   1              {
 139   2                      if(RESET_STEP_ZERO  == p_motor->blow_target_step)
 140   2                      {
 141   3                              p_motor->blow_target_step = TARGET_STEP_BLOW;
 142   3                              //p_motor->blow_target_step_pri = TARGET_STEP_BLOW;                             //?
 143   3                      }
 144   2              }
 145   1              else
 146   1              {
 147   2                      p_motor->blow_target_step = RESET_STEP_ZERO;
 148   2                      //p_motor->blow_target_step_pri = RESET_STEP_ZERO;
 149   2              }
 150   1                      if(TOUCH_RELAY_MOTOR_ABSORB)
 151   1                      {
 152   2                              if(RESET_STEP_ZERO == p_motor->absorb_target_step)
 153   2                              {
 154   3                                      p_motor->absorb_target_step = TARGET_STEP_ABSORB;
 155   3                              }
 156   2                      }
 157   1                      else
 158   1                      {
 159   2                              p_motor->absorb_target_step = RESET_STEP_ZERO;
 160   2                      }
 161   1      }
 162          
 163          /*********************************************************************************************************
             -**************
 164          * Function Name: 
 165          * Description  : 
 166          * Arguments    : None
 167          * Return Value : None
C51 COMPILER V9.01   XY_FML_TOUCH                                                          03/18/2021 08:37:09 PAGE 4   

 168          **********************************************************************************************************
             -*************/
 169          void fml_touch_deal_swing(datall* p_data)
 170          {
 171   1              if(TOUCH_RELAY_SWING_BLOW)
 172   1              {
 173   2                      p_data->remote.keyctrl.keystate_open_swing = ON;        
 174   2                      if(TARGET_LOW_SWING == p_data->motor.blow_motor_step)
 175   2                      {
 176   3                              p_data->motor.blow_target_step = TARGET_HIGH_SWING;
 177   3                              p_data->motor.blow_target_step_pri = p_data->motor.blow_target_step;
 178   3                      }
 179   2                      else if(TARGET_HIGH_SWING == p_data->motor.blow_motor_step)
 180   2                      {
 181   3                              p_data->motor.blow_target_step = TARGET_LOW_SWING;
 182   3                              p_data->motor.blow_target_step_pri = p_data->motor.blow_target_step;
 183   3                      }
 184   2                      else
 185   2                      {
 186   3                              if(p_data->motor.blow_target_step == p_data->motor.blow_motor_step)
 187   3                              {
 188   4                                      p_data->motor.blow_target_step = p_data->motor.blow_target_step_pri;
 189   4                              }
 190   3                      }
 191   2              }
 192   1              else
 193   1              {
 194   2                      if(ON == p_data->remote.keyctrl.keystate_open_swing)
 195   2                      {
 196   3                              p_data->motor.blow_target_step = p_data->motor.blow_motor_step;
 197   3                      }
 198   2                      p_data->remote.keyctrl.keystate_open_swing = OFF;
 199   2              }
 200   1      }
 201          
 202          /*********************************************************************************************************
             -**************
 203          * Function Name: 
 204          * Description  : 
 205          * Arguments    : None
 206          * Return Value : None
 207          **********************************************************************************************************
             -*************/
 208          void fml_touch_ctrl_logic(datall* p_data)
 209          {
 210   1              #ifdef XY_SYS_TEST_MODE
 211   1                      if(YES == p_data->testmode)
 212   1                              return;
 213   1              #endif
 214   1      
 215   1              fml_touch_recv_data(p_data);    
 216   1              if(TOUCH != p_data->keytype)
 217   1                      return;
 218   1              
 219   1              fml_touch_deal_disp(&p_data->display);
 220   1              fml_touch_deal_relay(&p_data->remote.keyctrl);
 221   1              fml_touch_deal_motor(&p_data->motor);
 222   1              fml_touch_deal_swing(p_data);
 223   1      }
 224          


C51 COMPILER V9.01   XY_FML_TOUCH                                                          03/18/2021 08:37:09 PAGE 5   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    810    ----
   CONSTANT SIZE    =      5    ----
   XDATA SIZE       =      2      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
