C51 COMPILER V9.01   XY_HAL_SERIAL                                                         03/12/2021 09:41:55 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE XY_HAL_SERIAL
OBJECT MODULE PLACED IN .\Objects\xy_hal_serial.obj
COMPILER INVOKED BY: D:\MDK5\C51\BIN\C51.EXE 03_HAL\xy_hal_serial.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\01_APL;
                    -.\02_FML;.\03_HAL;.\04_SYS) DEBUG PRINT(.\Listings\xy_hal_serial.lst) OBJECT(.\Objects\xy_hal_serial.obj)

line level    source

   1          #include "xy_sys_headfile.h"
   2          
   3          /*********************************************************************************************************
             -**************
   4          * Function Name: 
   5          * Description  : 
   6          * Arguments    : None
   7          * Return Value : None
   8          **********************************************************************************************************
             -*************/
   9          void hal_serial_Init(void)
  10          {       
  11   1              OTCON |= 0xC0;    //串行接口SSI选择Uart1通信
  12   1              SSCON0 = 0x50;   //设置通信方式为模式一，允许接收
  13   1              SSCON1 = 0X82;   //波特率低位控制
  14   1              SSCON2 = 0X06;   //波特率高位控制
  15   1              IE1 |= 0x01;      //开启SSI中断 
  16   1              EA = 1;
  17   1      }
  18          
  19          /*********************************************************************************************************
             -**************
  20          * Function Name: 
  21          * Description  : 
  22          * Arguments    : None
  23          * Return Value : None
  24          **********************************************************************************************************
             -*************/
  25          void hal_serial_uart_rx_touch(unsigned char dat)
  26          {
  27   1              uartdata* s_p_uart = &g_datall.uart;                                                    //?
  28   1              static switchstate   s_state = STEP1;
  29   1              static unsigned char s_uart_numb = 0;
  30   1              static unsigned char s_uart_buffer[sizeof(s_p_uart->rec_uart0_dat)] = {0};      
  31   1              
  32   1              s_uart_buffer[s_uart_numb] = dat;
  33   1              switch(s_state)
  34   1              {
  35   2                      case STEP1:
  36   2                              if(s_uart_buffer[s_uart_numb] == 0x68)
  37   2                              {
  38   3                                      s_uart_buffer[0] = 0x68;
  39   3                                      s_state = STEP2;                                
  40   3                              }
  41   2                              s_uart_numb = 0;
  42   2                              break;
  43   2                      case STEP2:
  44   2                              if(s_uart_numb >= (sizeof(s_p_uart->rec_uart0_dat)-1))
  45   2                              {
  46   3                                      s_state = STEP1;
  47   3                                      s_uart_numb = 0;
  48   3                                      s_p_uart->rec_uart0_ok = 1;
  49   3                                      memcpy(s_p_uart->rec_uart0_dat, s_uart_buffer, sizeof(s_p_uart->rec_uart0_dat));
  50   3                                      memset(s_uart_buffer, 0, sizeof(s_uart_buffer));
C51 COMPILER V9.01   XY_HAL_SERIAL                                                         03/12/2021 09:41:55 PAGE 2   

  51   3                              }
  52   2                              break;
  53   2                      default:
  54   2                              break;
  55   2              }
  56   1              s_uart_numb++;
  57   1              if(s_uart_numb >= sizeof(s_p_uart->rec_uart0_dat))
  58   1              {
  59   2                      s_uart_numb = 0;
  60   2              }
  61   1      }
  62          
  63          /*********************************************************************************************************
             -**************
  64          * Function Name:
  65          * Description  :
  66          * Arguments    : None
  67          * Return Value : None
  68          **********************************************************************************************************
             -*************/
  69          void hal_serial_uart_rx_display(unsigned char dat)
  70          {
  71   1              static unsigned char data_length;
  72   1              uartdata* s_p_uart = &g_datall.uart;
  73   1              static switchstate       s_state = STEP1;
  74   1              static unsigned char s_uart_numb = 0;
  75   1              static unsigned char s_uart_buffer[sizeof(s_p_uart->rec_uart1_dat)] = {0};
  76   1      
  77   1              s_uart_buffer[s_uart_numb] = dat;       
  78   1              s_uart_numb++;
  79   1      
  80   1              switch(s_state)
  81   1              {
  82   2                      case STEP1:
  83   2                              /* old version protocol about display */
  84   2                              if(s_uart_buffer[0] == (DISPLAY_DATA_HEAD_PRI >> 8 & 0xFF))
  85   2                              {
  86   3                                      if(s_uart_buffer[1] == (DISPLAY_DATA_HEAD_PRI & 0xFF))
  87   3                                      {
  88   4                                              /* finish match about head data */
  89   4                                              s_p_uart->rec_protocol = OLD;
  90   4                                              s_uart_numb = 2;
  91   4                                              s_state = STEP2;
  92   4                                      }
  93   3                                      else if(s_uart_buffer[1] == (DISPLAY_DATA_HEAD_PRI >> 8 & 0xFF))
  94   3                                      {
  95   4                                              /* wait for next legal command */
  96   4                                              s_uart_numb = 1;
  97   4                                      }
  98   3                                      else if(s_uart_numb == 2)
  99   3                                      {
 100   4                                              s_uart_numb = 0;
 101   4                                      }
 102   3      //                              else if(s_uart_buffer[1] == (DISPLAY_DATA_HEAD_XY >> 8 & 0xFF))
 103   3      //                              {
 104   3      //                                      s_uart_buffer[0] = (DISPLAY_DATA_HEAD_XY >> 8 & 0xFF)
 105   3      //                                      s_uart_numb = 1;
 106   3      //                              }
 107   3                              }
 108   2                              /* new version protocol about display */
 109   2                              else if(s_uart_buffer[0] == (DISPLAY_DATA_HEAD_XY >> 8 & 0xFF))
 110   2                              {
C51 COMPILER V9.01   XY_HAL_SERIAL                                                         03/12/2021 09:41:55 PAGE 3   

 111   3                                      if(s_uart_buffer[1] == (DISPLAY_DATA_HEAD_XY & 0xFF))
 112   3                                      {
 113   4                                              /* finish match about head data */
 114   4                                              s_p_uart->rec_protocol = NEW;
 115   4                                              s_uart_numb = 2;
 116   4                                              s_state = STEP2;
 117   4                                      }
 118   3                                      else if(s_uart_buffer[1] == (DISPLAY_DATA_HEAD_XY >> 8 & 0xFF))
 119   3                                      {
 120   4                                              /* wait for next legal command */
 121   4                                              s_uart_numb = 1;
 122   4                                      }
 123   3                                      else
 124   3                                      {
 125   4                                              s_uart_numb = 0;
 126   4                                      }
 127   3                              }
 128   2                              else
 129   2                              {
 130   3                                      s_uart_numb = 0;
 131   3                              }
 132   2                              break;
 133   2                      case STEP2:
 134   2                              if(OLD == s_p_uart->rec_protocol)
 135   2                              {
 136   3                                      data_length = 7;
 137   3                                      s_state = STEP3;
 138   3                              }
 139   2                              else if(NEW  == s_p_uart->rec_protocol)
 140   2                              {
 141   3                                      data_length = s_uart_buffer[2] + 3;             ///< data + head(2) + len(1)
 142   3                                      s_state = STEP3;
 143   3                              }
 144   2                              else
 145   2                              {
 146   3                                      s_state = STEP1;
 147   3                                      s_uart_numb = 0;
 148   3                              }
 149   2                              break;
 150   2                      case STEP3:
 151   2                              if(s_uart_numb >= data_length)
 152   2                              {
 153   3                                      s_p_uart->rec_uart1_ok = 1;
 154   3                                      memcpy(s_p_uart->rec_uart1_dat, s_uart_buffer, data_length);
 155   3                                      memset(s_uart_buffer, 0, data_length);
 156   3                                      s_state = STEP1;
 157   3                                      s_uart_numb = 0;
 158   3                              }
 159   2                              break;
 160   2                      default:
 161   2                              break;
 162   2              }
 163   1      }
 164          
 165          /*********************************************************************************************************
             -**************
 166          * Function Name:
 167          * Description  :
 168          * Arguments    : None
 169          * Return Value : None
 170          **********************************************************************************************************
             -*************/
C51 COMPILER V9.01   XY_HAL_SERIAL                                                         03/12/2021 09:41:55 PAGE 4   

 171          //void hal_serial_uart_tx_display(unsigned char* buffer, unsigned int len)
 172          //{
 173          //      hal_irq_uart1_send(buffer, len);
 174          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    495    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     21       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
