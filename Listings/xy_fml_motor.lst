C51 COMPILER V9.01   XY_FML_MOTOR                                                          03/20/2021 09:36:21 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE XY_FML_MOTOR
OBJECT MODULE PLACED IN .\Objects\xy_fml_motor.obj
COMPILER INVOKED BY: D:\MDK5\C51\BIN\C51.EXE 02_FML\xy_fml_motor.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\01_APL;.
                    -\02_FML;.\03_HAL;.\04_SYS) DEBUG PRINT(.\Listings\xy_fml_motor.lst) OBJECT(.\Objects\xy_fml_motor.obj)

line level    source

   1          #include "xy_sys_headfile.h"
   2          
   3          /*********************************************************************************************************
             -**************
   4          * Function Name: 
   5          * Description  : 
   6          * Arguments    : None
   7          * Return Value : None
   8          **********************************************************************************************************
             -*************/
   9          void fml_motor_init_data(datall* p_data)
  10          {
  11   1              memset((char *)&p_data->motor, 0, sizeof(p_data->motor));               //reset motor step
  12   1      
  13   1              p_data->motor.blow_target_step_pri      = TARGET_LOW_SWING;
  14   1              p_data->motor.blow_motor_step_pri   = TARGET_HIGH_SWING;
  15   1              
  16   1              p_data->motor.blow_motor_step           = MAX_RESET_STEP;                       ///< checkself max step
  17   1      }
  18          
  19          /*********************************************************************************************************
             -**************
  20          * Function Name: 
  21          * Description  : 
  22          * Arguments    : None
  23          * Return Value : None
  24          **********************************************************************************************************
             -*************/
  25          void fml_motor_reset_step(motorcontrol* p_motor)
  26          {
  27   1              static switchstate s_onetime[2] = {RESET, RESET};
  28   1              static switchstate s_resetstep = STEP1;
  29   1      
  30   1              if(STEP2 == s_resetstep)
  31   1              {
  32   2                      if(RESET_STEP_ZERO == p_motor->blow_target_step)
  33   2                      {
  34   3                              if(RESET_STEP_ZERO == p_motor->blow_motor_step)
  35   3                              {
  36   4                                      if(RESET == s_onetime[0])
  37   4                                      {
  38   5                                              s_onetime[0] = SET;
  39   5                                              p_motor->blow_motor_step = COMPENSATE_STEP;
  40   5                                      }
  41   4                              }
  42   3                      }
  43   2                      else
  44   2                      {
  45   3                              s_onetime[0] = RESET;
  46   3                      }
  47   2                      p_motor->blow_target_step_real = p_motor->blow_target_step;
  48   2              }
  49   1              else
  50   1              {
C51 COMPILER V9.01   XY_FML_MOTOR                                                          03/20/2021 09:36:21 PAGE 2   

  51   2                      /* only enter work one time about checkself. */
  52   2                      p_motor->blow_target_step_real = RESET_STEP_ZERO;
  53   2                              if(RESET_STEP_ZERO == p_motor->blow_motor_step)
  54   2                              {
  55   3                                      s_resetstep = STEP2;
  56   3                              }
  57   2              }
  58   1      }
  59          
  60          /*********************************************************************************************************
             -**************
  61          * Function Name: 
  62          * Description  : 
  63          * Arguments    : None
  64          * Return Value : None
  65          **********************************************************************************************************
             -*************/
  66          void fml_motor_timer_ctrl(datall* p_data)
  67          {
  68   1              static unsigned char s_count = 0;
  69   1      
  70   1              if(ON == p_data->remote.keyctrl.keystate_open_swing)  
  71   1              {
  72   2                      s_count++;
  73   2                      if(s_count > 2)
  74   2                      {
  75   3                              s_count = 0;
  76   3                              hal_timer_motor_blow(&p_data->motor);
  77   3                      }
  78   2              }
  79   1              else
  80   1              {
  81   2                      hal_timer_motor_blow(&p_data->motor);
  82   2              }
  83   1      }
  84          
  85          /*********************************************************************************************************
             -**************
  86          * Function Name: 
  87          * Description  : 
  88          * Arguments    : None
  89          * Return Value : None
  90          **********************************************************************************************************
             -*************/
  91          void fml_motor_blow_step(unsigned char n)
  92          {
  93   1              switch(n)
  94   1              {
  95   2                      case 0:
  96   2                              blow_motor_step1_on();blow_motor_step2_off();blow_motor_step3_off();blow_motor_step4_off();
  97   2                              break;
  98   2                      case 1:
  99   2                              blow_motor_step1_on();blow_motor_step2_on();blow_motor_step3_off();blow_motor_step4_off();
 100   2                              break;
 101   2                      case 2:
 102   2                              blow_motor_step1_off();blow_motor_step2_on();blow_motor_step3_off();blow_motor_step4_off();
 103   2                              break;
 104   2                      case 3:
 105   2                              blow_motor_step1_off();blow_motor_step2_on();blow_motor_step3_on();blow_motor_step4_off();
 106   2                              break;  
 107   2                      case 4:
 108   2                              blow_motor_step1_off();blow_motor_step2_off();blow_motor_step3_on();blow_motor_step4_off();
C51 COMPILER V9.01   XY_FML_MOTOR                                                          03/20/2021 09:36:21 PAGE 3   

 109   2                              break;
 110   2                      case 5:
 111   2                              blow_motor_step1_off();blow_motor_step2_off();blow_motor_step3_on();blow_motor_step4_on();
 112   2                              break;
 113   2                      case 6:
 114   2                              blow_motor_step1_off();blow_motor_step2_off();blow_motor_step3_off();blow_motor_step4_on();
 115   2                              break;
 116   2                      case 7:
 117   2                              blow_motor_step1_on();blow_motor_step2_off();blow_motor_step3_off();blow_motor_step4_on();
 118   2                              break;          
 119   2                      default:
 120   2                              break;
 121   2              }
 122   1      }
 123          
 124          /*********************************************************************************************************
             -**************
 125          * Function Name: 
 126          * Description  : 
 127          * Arguments    : None
 128          * Return Value : None
 129          **********************************************************************************************************
             -*************/
 130          void fml_motor_close_blow(void)
 131          {
 132   1              blow_motor_step1_off();
 133   1              blow_motor_step2_off();
 134   1              blow_motor_step3_off();
 135   1              blow_motor_step4_off();
 136   1      }
 137          
 138          /*********************************************************************************************************
             -**************
 139          * Function Name: 
 140          * Description  : 
 141          * Arguments    : None
 142          * Return Value : None
 143          **********************************************************************************************************
             -*************/
 144          void fml_motor_blow_move(motorcontrol* p_motor)
 145          {
 146   1              if(p_motor->blow_motor_step_delay_flag)
 147   1              {
 148   2                      p_motor->blow_motor_step_delay_flag=0;
 149   2                      p_motor->blow_motor_step_delay_count=0;
 150   2                      if(p_motor->blow_motor_step < p_motor->blow_target_step_real)
 151   2                      {
 152   3                              fml_motor_blow_step(p_motor->blow_motor_step%8);
 153   3                              p_motor->blow_motor_step++;
 154   3                      }
 155   2                      else if(p_motor->blow_motor_step > p_motor->blow_target_step_real)
 156   2                      {
 157   3                              fml_motor_blow_step(p_motor->blow_motor_step%8);
 158   3                              p_motor->blow_motor_step--;
 159   3                      }
 160   2                      else
 161   2                      {
 162   3                              fml_motor_close_blow();
 163   3                      }
 164   2              }
 165   1      }
 166          
C51 COMPILER V9.01   XY_FML_MOTOR                                                          03/20/2021 09:36:21 PAGE 4   

 167          /*********************************************************************************************************
             -**************
 168          * Function Name: 
 169          * Description  : 
 170          * Arguments    : None
 171          * Return Value : None
 172          **********************************************************************************************************
             -*************/
 173          void fml_motor_save_step(datall* p_data)
 174          {
 175   1              if(((WORKMODULE_BLOW == p_data->remote.workmode.workmode_current)
 176   1                      || (WORKMODULE_WARM == p_data->remote.workmode.workmode_current)))
 177   1              {
 178   2                      if((ON == p_data->remote.keyctrl.keystate_fan_blow) && (p_data->motor.blow_motor_step > TARGET_LOW_SWING
             -))
 179   2                      {
 180   3                              p_data->motor.blow_motor_step_pri = p_data->motor.blow_motor_step;
 181   3                      }
 182   2              }
 183   1      }
 184          /*********************************************************************************************************
             -**************
 185          * Function Name: 
 186          * Description  : 
 187          * Arguments    : None
 188          * Return Value : None
 189          **********************************************************************************************************
             -*************/
 190          void fml_motor_ctrl_move(datall* p_data)
 191          {
 192   1              #ifdef XY_SYS_TEST_MODE
 193   1                      if(YES == p_data->testmode)
 194   1                              return;
 195   1              #endif
 196   1      
 197   1              fml_motor_reset_step(&p_data->motor);
 198   1              fml_motor_blow_move(&p_data->motor);
 199   1              fml_motor_save_step(p_data);
 200   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    537    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
